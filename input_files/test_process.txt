Name = Process:test
0.80 => State:test
0.20 => State:test2
State:test -- 1.00  => State:test2
State:test2 -- test_message -- 1.00 => State:test
State:test2 -- test_message1;test_message2 -- 1.00 => State:test2
State:test2 -- 0.30  => State:test
State:test2 -- 0.10  => State:test2
State:test2 -- 0.60  => State:test3
State:test3 -- 0.95  => GoToRefuel
State:test3 -- 0.05  => State:test2
GoToRefuel -- 1.00 => State:test2
//tokens are =>,--
//There are 3 types of state transitions
//1)Entrance transitions denoted by "prob->state" i.e. 0.80 -> State:test
//2)Normal trans i.e. State:test -- 1.00  -> State:test2
//3)Message trans i.e. State:test2 -- test_message -- 1.00 -> State:test
//This gives rise to 3 kinds of states
//1)Entrance states - possible initial states for entities when they enter the process tree
//2)Intermediate states - states that connect one state to another.
//3)Terminal states - leaf nodes that do not connect to other states.
//3.5)It should be possible to specify that a state should restart the process on exit i.e. state2=>_ (not implemented yet)
//Note that the classification of a state is purely determined by its position in the process graph and is not a property of the state itself.
//Edges are directed and  weighted
//--the weight of an edge represents its probability. The weight of all directed edges out of a node should sum to 100
//--the label represents the message and the weight is the probability of state change on receipt of message